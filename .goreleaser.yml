version: 2

project_name: SatisfactoryModManager

before:
  hooks:
    - go generate -x -tags tools ./...
    - go mod tidy

    # Apparently only wails build generates the embedded directory
    - mkdir -p frontend/build
    - touch frontend/build/.gitkeep

    - wails generate module -tags webkit2_41 # I have no idea why, but if the tag isn't set here, the final artifact will depend on webkit2gtk-4.0
    - pnpm -C frontend install
    - pnpm -C frontend build

### Build

builds:
  - id: standalone

    targets:
      - windows_amd64
      - linux_amd64
      - darwin_universal

    gobinary: task
    ldflags:
      # The default args
      - -s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.Date}}
      # Auto-update mode
      - -X main.updateMode=standalone

    flags:
      - -- # Marker for task to interpret remaining arguments as CLI_ARGS
      - -s
      - -skipbindings

    overrides:
      - goos: linux
        goarch: amd64
        goamd64: v1
        tags:
          - webkit2_41

  - id: appimage

    binary: SatisfactoryModManager.AppImage # Parallel builds would overwrite each other, so we need to specify the binary name

    goos:
      - linux
    goarch:
      - amd64

    gobinary: task
    command: build:linux:appimage
    ldflags:
      # The default args
      - -s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.Date}}
      # Auto-update mode
      - -X main.updateMode=appimage

    flags:
      - -- # Marker for task to interpret remaining arguments as CLI_ARGS
      - -s
      - -skipbindings

    tags:
      - webkit2_41

  - id: nsis

    binary: SatisfactoryModManager-Setup # This name must match the nsis script OutFile, so the installer overwrites the wails built exe

    goos:
      - windows
    goarch:
      - amd64

    gobinary: task
    ldflags:
      # The default args
      - -s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.Date}}
      # Auto-update mode
      - -X main.updateMode=nsis

    flags:
      - -- # Marker for task to interpret remaining arguments as CLI_ARGS
      - -s
      - -skipbindings
      - -nsis

### Package

archives:
  - id: windows-nsis
    builds:
      - nsis
    format: binary
    name_template: SatisfactoryModManager-Setup

  - id: appimage
    builds:
      - appimage
    format: binary
    name_template: '{{ .ProjectName }}_{{ .Os }}_{{ .Arch }}{{ with .Arm }}v{{ . }}{{ end }}{{ with .Mips }}_{{ . }}{{ end }}.AppImage'

  - id: standalone
    builds:
      - standalone
    format: binary
    name_template: '{{ .ProjectName }}_{{ .Os }}_{{ .Arch }}{{ with .Arm }}v{{ . }}{{ end }}{{ with .Mips }}_{{ . }}{{ end }}{{ if eq .Os "darwin" }}.zip{{ end }}'
    format_overrides:
      # Skip the windows standalone build, as it is not ready yet
      - goos: windows
        format: none

checksum:
  name_template: 'checksums.txt'

report_sizes: true

### Release

snapshot:
  version_template: '{{ .Version }}+{{ if ne .Branch "master" }}{{ .Branch }}.{{ end }}{{ .ShortCommit }}'

release:  
  draft: true
  name_template: "{{.ProjectName}} v{{.Version}}"
  
  # Include all artifacts

  header: |
    ### Note: this is a prerelease, and things might not work as expected. There might be differences between SMM v2 and SMM v3. If you encounter any issues, let us know on discord, or create an issue here. At the moment, SMM v2 will not auto-update to SMM v3, so while you cannot have both installed at once, you are still able to rollback if you run into major issues.

    ## Installation
  
    | Windows | Linux | MacOS |
    |:-------:|:-----:|:-----:|
    | [Download](https://github.com/satisfactorymodding/SatisfactoryModManager/releases/download/v{{.Version}}/SatisfactoryModManager-Setup.exe) | [Download (standalone)](https://github.com/satisfactorymodding/SatisfactoryModManager/releases/download/v{{.Version}}/SatisfactoryModManager_linux_amd64) <br> *requires libwebkit2gtk-4.1* |  [Download](https://github.com/satisfactorymodding/SatisfactoryModManager/releases/download/v{{.Version}}/SatisfactoryModManager_darwin_universal.zip) |
    | | [Download (AppImage)](https://github.com/satisfactorymodding/SatisfactoryModManager/releases/download/v{{.Version}}/SatisfactoryModManager_linux_amd64.AppImage) | |
    
    If you already have Satisfactory Mod Manager installed, you don't need to download it again, it will auto-update.

  templated_extra_files:
    - src: ./build/smm2/latest.yml.tmpl
      dst: latest.yml
    - src: ./build/smm2/latest-linux.yml.tmpl
      dst: latest-linux.yml